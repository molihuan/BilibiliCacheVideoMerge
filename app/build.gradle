plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

/**
 * ffmpeg核心类型可以只打包单核心
 */
enum FFmpegCoreType {
    ALL,
    RXFFMPEG,
    FFMPEGCOMMAND
}

def ffmpegCoreType = "-1"


//ffmpeg核心依赖
dependencies {
    switch (ffmpegCoreType) {
        case "-1"://全核心
            //RxFFmpeg依赖
            implementation 'com.github.microshow:RxFFmpeg:4.9.0-lite'
            //FFmpegCommand依赖
            implementation 'com.github.AnJoiner:FFmpegCommand:1.2.2-lite'
            break
        case "0":
            //RxFFmpeg依赖
            implementation 'com.github.microshow:RxFFmpeg:4.9.0-lite'
            break
        case "1":
            //FFmpegCommand依赖
            implementation 'com.github.AnJoiner:FFmpegCommand:1.2.2-lite'
            break
        default:
            break
    }
}


android {
    namespace 'com.molihua.hlbmerge'
    compileSdk 33

    defaultConfig {
        applicationId "com.molihua.hlbmerge"
        minSdk 24
        targetSdk 33
        versionCode 59
        versionName "1.6.9.9"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        ndk {
            abiFilters "armeabi-v7a", "arm64-v8a", "x86_64"
        }
        //设置BuildConfig.FFMPEG_CORE_TYPE可以在java中调用
        buildConfigField "int", "FFMPEG_CORE_TYPE", ffmpegCoreType

    }
    //开启数据绑定
    buildFeatures {
        dataBinding true
    }

    buildTypes {
        release {
            //混淆
            minifyEnabled false
            //Zipalign优化
            zipAlignEnabled false
            // 移除无用的resource文件
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

        }
        debug {

        }
    }
    //基于不同的abi架构配置打包不同的apk
    splits {
        abi {
            // 必须为true，打包才会为不同的abi生成不同的apk
            enable true
            // 默认情况下，包含了所有的ABI。
            // 所以使用reset()清空所有的ABI，再使用include指定我们想要生成的架构armeabi-v7a、arm-v8a
            reset()
            // 逗号分隔列表的形式指定 Gradle 应针对哪些 ABI 生成 APK。只与 reset() 结合使用，以指定确切的 ABI 列表。
            include "armeabi-v7a", "arm64-v8a", "x86_64", "x86"
            // 是否生成通用的apk，也就是包含所有ABI的apk。如果设为 true，那么除了按 ABI 生成的 APK 之外，Gradle 还会生成一个通用 APK。
            universalApk true
        }
    }
    //修改打包名称
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def realAbi = "all"
            try {
                realAbi = output.filters[0].identifier
            } catch (Exception e) {

            }
            output.outputFileName = "app-${realAbi}.apk"
        }
    }


    //资源配置
    sourceSets {
        main {
            java {
                //配置编译时忽略java文件
                switch (ffmpegCoreType) {
                    case "-1"://全核心
                        break
                    case "0":
                        //RxFFmpeg依赖
                        excludes = [
                                'com/molihua/hlbmerge/ffmpeg/core/impl/FFmpegCommandCore.java',
                                'com/molihua/hlbmerge/ffmpeg/core/impl/FFmpegCommandCallback.java'
                        ]
                        break
                    case "1":
                        //FFmpegCommand依赖
                        excludes = [
                                'com/molihua/hlbmerge/ffmpeg/core/impl/RxFFmpegCore.java',
                                'com/molihua/hlbmerge/ffmpeg/core/impl/RxFFmpegCallback.java'
                        ]
                        break
                    default:
                        break
                }
            }
        }
    }

    //环境配置
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildToolsVersion '30.0.3'

}


dependencies {
    implementation fileTree(dir: "libs", includes: ["*.aar", "*.jar"])
    //文件选择器(包含权限请求)
    implementation 'io.github.molihuan:pathselector:1.1.16'
    // 腾讯的键值对存储mmkv
    implementation 'com.tencent:mmkv:1.3.1'
    implementation(platform("org.jetbrains.kotlin:kotlin-bom:1.8.0"))
    //DKVideoPlayer内部默认使用系统mediaplayer进行解码
    implementation 'xyz.doikki.android.dkplayer:dkplayer-java:3.3.7'
    //DKVideoPlayer UI(主要是使用资源)
    implementation 'xyz.doikki.android.dkplayer:dkplayer-ui:3.3.7'
    //bilibili弹幕组件
    implementation 'com.github.ctiao:DanmakuFlameMaster:0.9.25'
    implementation 'com.github.ctiao:ndkbitmap-armv7a:0.9.21'
    implementation 'com.github.ctiao:ndkbitmap-x86:0.9.21'
    //XUpdate
    implementation 'com.github.xuexiangjys:XUpdate:2.1.4'
    implementation 'com.github.xuexiangjys.XUpdateAPI:xupdate-easy:1.0.1'
    //XUI
    implementation 'com.github.xuexiangjys:XUI:1.2.0'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    //XUI
    implementation 'com.github.bumptech.glide:glide:4.12.0'

    //友盟依赖
    implementation 'com.umeng.umsdk:common:9.5.4'// (必选)
    implementation 'com.umeng.umsdk:asms:1.6.3'// 必选
    implementation 'com.umeng.umsdk:apm:1.8.0'// U-APM产品包依赖(必选)
    //bugly依赖
    implementation 'com.tencent.bugly:crashreport:4.1.9.2'
    //kotlin
    implementation 'androidx.core:core-ktx:1.9.0'
    //协程
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.4'

    def shizuku_version = "13.1.5"
    implementation "dev.rikka.shizuku:api:$shizuku_version"
    // Add this line if you want to support Shizuku
    implementation "dev.rikka.shizuku:provider:$shizuku_version"

    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'


}